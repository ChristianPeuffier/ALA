name: CI/CD Pipeline with Secrets Management

on:
  push:
    branches: [ main, develop, copilot/add-ci-cd-secret-management ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  # Security audit job
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Run security audit
        working-directory: ./app
        run: npm audit --audit-level moderate

      - name: Check for secrets in code
        run: |
          echo "üîç Scanning for potential secrets in code..."
          if grep -r -E "(password|secret|key|token)\s*=\s*['\"][^'\"]{8,}" app/ --exclude-dir=node_modules || true; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found!"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi

  # Test job with secrets
  test:
    name: Test Application
    runs-on: ubuntu-latest
    needs: security-audit
    environment: testing
    env:
      # Test environment secrets (these would be set in GitHub repository secrets)
      DB_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
      API_KEY: ${{ secrets.TEST_API_KEY }}
      JWT_SECRET: ${{ secrets.TEST_JWT_SECRET }}
      DB_HOST: localhost
      DB_NAME: test_db
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci

      - name: Verify secrets are loaded (without exposing them)
        working-directory: ./app
        run: |
          echo "üîê Verifying secrets are properly loaded..."
          if [ -z "$DB_PASSWORD" ]; then
            echo "‚ùå DB_PASSWORD not set"
            exit 1
          else
            echo "‚úÖ DB_PASSWORD is set"
          fi
          
          if [ -z "$API_KEY" ]; then
            echo "‚ùå API_KEY not set"
            exit 1
          else
            echo "‚úÖ API_KEY is set"
          fi
          
          if [ -z "$JWT_SECRET" ]; then
            echo "‚ùå JWT_SECRET not set"
            exit 1
          else
            echo "‚úÖ JWT_SECRET is set"
          fi

      - name: Run tests
        working-directory: ./app
        run: npm test

      - name: Test application startup
        working-directory: ./app
        run: |
          echo "üöÄ Testing application startup..."
          timeout 10s npm start &
          sleep 5
          curl -f http://localhost:3000/health || exit 1
          echo "‚úÖ Application started successfully"

  # Build job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci --only=production

      - name: Create build artifact
        run: |
          mkdir -p build
          cp -r app build/
          # Remove development files from build
          rm -f build/app/.env*
          rm -f build/app/test.js
          echo "‚úÖ Build artifact created"

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: build/
          retention-days: 30

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    env:
      # Staging environment secrets
      DB_PASSWORD: ${{ secrets.STAGING_DB_PASSWORD }}
      API_KEY: ${{ secrets.STAGING_API_KEY }}
      JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
      DB_HOST: ${{ secrets.STAGING_DB_HOST }}
      DB_NAME: staging_db
      NODE_ENV: staging

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./build

      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Environment: $NODE_ENV"
          echo "Database host: $DB_HOST"
          echo "Secrets verification:"
          [ ! -z "$DB_PASSWORD" ] && echo "‚úÖ DB_PASSWORD loaded" || echo "‚ùå DB_PASSWORD missing"
          [ ! -z "$API_KEY" ] && echo "‚úÖ API_KEY loaded" || echo "‚ùå API_KEY missing"
          [ ! -z "$JWT_SECRET" ] && echo "‚úÖ JWT_SECRET loaded" || echo "‚ùå JWT_SECRET missing"
          echo "‚úÖ Staging deployment completed"

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    env:
      # Production environment secrets
      DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
      API_KEY: ${{ secrets.PROD_API_KEY }}
      JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}
      DB_HOST: ${{ secrets.PROD_DB_HOST }}
      DB_NAME: production_db
      NODE_ENV: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./build

      - name: Deploy to production environment
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "Environment: $NODE_ENV"
          echo "Database host: $DB_HOST"
          echo "Secrets verification:"
          [ ! -z "$DB_PASSWORD" ] && echo "‚úÖ DB_PASSWORD loaded" || echo "‚ùå DB_PASSWORD missing"
          [ ! -z "$API_KEY" ] && echo "‚úÖ API_KEY loaded" || echo "‚ùå API_KEY missing"
          [ ! -z "$JWT_SECRET" ] && echo "‚úÖ JWT_SECRET loaded" || echo "‚ùå JWT_SECRET missing"
          echo "‚úÖ Production deployment completed"

      - name: Health check after deployment
        run: |
          echo "üè• Running post-deployment health checks..."
          # In a real scenario, this would check the actual deployed application
          echo "‚úÖ Health checks passed"